//
//  Tools - Text Sizing
//

// Mixin to generate REM-based text sizes with vertical
// rhythm based on the sizing units.

@use "sass:math";
@use 'sass:map';
@use 'fluid' as *;
@use '../../settings/core' as *;

@function sizing(
  $step: 0,
  $important: false,
  $static: false,
  $setting: text,
  $sizing-fluid: $sizing-fluid
) {

  @if $sizing-fluid != false {

    $vw-min: map.get($sizing-fluid, viewport-min);
    $vw-max: map.get($sizing-fluid, viewport-max);

    $size-min: map.get($sizing-fluid, spacing-size-normal-min);
    $size-max: map.get($sizing-fluid, spacing-size-normal-max);
    $scale-min: map.get($sizing-fluid, spacing-scale-min);
    $scale-max: map.get($sizing-fluid, spacing-scale-max);

    @if $setting == text {
      $size-min: map.get($sizing-fluid, text-size-normal-min);
      $size-max: map.get($sizing-fluid, text-size-normal-max);
      $scale-min: map.get($sizing-fluid, text-scale-min);
      $scale-max: map.get($sizing-fluid, text-scale-max);
    }

    @if $step > 0 {

      $size-min: $size-min * math.pow($scale-min, $step);
      $size-max: $size-max * math.pow($scale-max, $step);

    }

    @if $step < 0 {

      $size-min: math.div($size-min, math.pow($scale-min, $step));
      $size-max: math.div($size-max, math.pow($scale-max, $step));

    }

    $size-fluid: fluid($size-min, $size-max, $vw-min, $vw-max);

    @if $important == true {
      @if $static == true {
        @return #{ $size-min + ' !important'};
      }
      @return #{ $size-fluid + ' !important'};
    }
    @else {
      @if $static == true {
        @return $size-min;
      }
      @return $size-fluid;
    }

  }

  @return ''

}
