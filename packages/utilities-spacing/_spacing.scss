/*
 *  Utilities - Spacing
 */

// Generate responsive spacing utility classes.


@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use 'node_modules/@substructure/settings';
@use 'node_modules/@substructure/tools';


$directions: () !default;

$directions: map.merge(
  (  
    all        : '',
    vertical   : 'vertical-',
    horizontal : 'horizontal-',
    top        : 'top-',
    bottom     : 'bottom-', 
    left       : 'left-', 
    right      : 'right-'
  ),
  $directions
);

$padding: true !default;

$spacing-sizes: settings.$spacing-sizes !default;

$responsive: settings.$responsive !default;

$breakpoints: settings.$breakpoints !default;

$breakpoint-separator: 
  settings.$breakpoint-separator 
!default;

$namespaces: () !default;

$namespaces: map.merge(
  (
    margin: #{
      map.get( settings.$layer-namespaces, utilities ) +
      'margin-'
    },
    padding: #{
      map.get( settings.$layer-namespaces, utilities ) +
      'padding-'
    }
  ),
  $namespaces
);

@if map.has-key( $directions, horizontal ) {

  $_margin-auto-class: #{
    map.get( $namespaces, margin ) +
    map.get( $directions, horizontal ) +
    'auto'
  };

  .#{ $_margin-auto-class } {
    margin-left: auto !important;
    margin-right: auto !important;
  }

  @if $responsive {
        
    @each $breakpoint, $breakpoint-value in $breakpoints {
      
      @include tools.respond-to( 
        $breakpoint, $breakpoints 
      ) {
        
        .#{ 
          $_margin-auto-class +
          $breakpoint-separator + 
          $breakpoint
        } {
          margin-left: auto !important;
          margin-right: auto !important;
        }
        
      }

    }

  }

}

@each $direction, $direction-namespace in $directions {

  @each $spacing-size-value in $spacing-sizes {

    $_margin-class: #{
      map.get( $namespaces, margin ) +
      $direction-namespace +
      list.index( 
        $spacing-sizes,
        $spacing-size-value
      )
    };
    
    .#{
      $_margin-class
    } {
      
      @include tools.spacing( 
        $direction, $spacing-size-value, margin, true
      )
      
    }
    
    @if $responsive {
      
      @each $breakpoint, $breakpoint-value in $breakpoints {
        
        @include tools.respond-to( 
          $breakpoint, $breakpoints 
        ) {
          
          .#{ 
            $_margin-class + 
            $breakpoint-separator + 
            $breakpoint
          } {
          
            @include tools.spacing( 
              $direction, $spacing-size-value, margin, true
            )
            
          }
        
        }
        
      }
      
    }

  }

}

@each $direction, $direction-namespace in $directions {

  @each $spacing-size-value in $spacing-sizes {

    @if $padding == true {

      $_padding-class: #{
        map.get( $namespaces, padding ) +
        $direction-namespace + 
        list.index( 
          $spacing-sizes,
          $spacing-size-value
        )
      };

      .#{$_padding-class} {
      
        @include tools.spacing( 
          $direction, $spacing-size-value, padding, true
        )
        
      }
      
      @if $responsive {
        
        @each $breakpoint, $breakpoint-value in $breakpoints {
          
          @include tools.respond-to( 
            $breakpoint, $breakpoints 
          ) {
            
            .#{ 
              $_padding-class + 
              $breakpoint-separator + 
              $breakpoint
            } {
            
              @include tools.spacing( 
                $direction, $spacing-size-value, padding, true
              )
              
            }
          
          }
          
        }
         
      }

    }

  }
    
}
