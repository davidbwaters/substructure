/*
 *  Utilities - Sizing
 */


@use 'sass:map';
@use 'node_modules/@substructure/settings';
@use 'node_modules/@substructure/tools';


$height: false !default;

$push: true !default;

$pull: true !default;

$responsive: settings.$responsive !default;

$factors: settings.$sizing-factors !default;

$separator: settings.$sizing-separator !default;

$breakpoints: settings.$breakpoints !default;

$breakpoint-separator: 
  settings.$breakpoint-separator 
!default;

$namespaces: (
  width: #{
    map.get( settings.$layer-namespaces, utilities ) + 
    ''
  },
  height: #{
    map.get( settings.$layer-namespaces, utilities ) + 
    'height-'
  },
  push: #{
    map.get( settings.$layer-namespaces, utilities ) + 
    'push-'
  },
  pull: #{
    map.get( settings.$layer-namespaces, utilities ) + 
    'pull-'
  },
) !default;


@mixin _sizing( $type ) {

  @each $factor in $factors {

    @for $count from 1 through $factor {

      $class: #{
        map.get( $namespaces, $type ) +
        $count + 
        $separator + 
        $factor
      };

      $property: $type;
      $size-value: $count / $factor * 100%;

      @if $type == push or $type == pull {
        $property: 'margin-left';
      }

      @if $type == pull {
        $size-value: #{ $count / $factor * 100% * -1 };
      };

      .#{ $class } {

        #{ $property }: #{ $size-value };
      
      }

      @if $responsive == true {

        @each $breakpoint in $breakpoints {
      
          @include tools.respond-to( $breakpoint ) {

            #{ 
              $class + 
              $breakpoint-separator + 
              $breakpoint
            } {

              #{ $property }: #{ $size-value };

            }

          }

        }
        
      }

    }

  }

}

@include _sizing( width );

@if ( $height == true ) {
  @include _sizing( height );
}

@if ( $push == true ) {
  @include _sizing( push );


@if ( $pull == true ) {
  @include _sizing( pull );
}
